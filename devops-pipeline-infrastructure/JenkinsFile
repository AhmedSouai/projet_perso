pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "my-test-app:${BUILD_NUMBER}"
        DOCKER_REGISTRY = "docker.io/myuser"
    }

    stages {
        stage('Cloner le code') {
            steps {
                script {
                    echo "Clonage du code depuis GitHub..."
                    git 'https://github.com/ton_repertoire.git'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Construction de l'image Docker..."
                    sh 'docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE .'
                }
            }
        }

        stage('Tests Unitaires') {
            steps {
                script {
                    echo "Exécution des tests unitaires..."
                    sh 'python3 -m unittest discover app/src/tests/ || exit 1'
                }
            }
        }

        stage('Tests d\'Intégration') {
            steps {
                script {
                    echo "Exécution des tests d'intégration..."
                    sh 'python3 -m unittest discover app/src/tests/ || exit 1'
                }
            }
        }

        stage('Tests de Performance') {
            steps {
                script {
                    echo "Test de performance en cours..."
                    timeout(time: 60, unit: 'SECONDS') {
                        sh 'python3 -m unittest discover app/src/tests/ || exit 1'
                    }
                }
            }
        }

        stage('Tests de Sécurité') {
            steps {
                script {
                    echo "Analyse de sécurité avec Bandit..."
                    sh 'bandit -r app/src || exit 1'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Poussée de l'image Docker vers le registre..."
                    sh 'docker push $DOCKER_REGISTRY/$DOCKER_IMAGE'
                }
            }
        }

        stage('Notification') {
            steps {
                script {
                    echo "Envoi d'une notification..."
                    slackSend (channel: '#notifications', message: "Pipeline ${currentBuild.currentResult}: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
                }
            }
        }
    }

    post {
        success {
            echo "Le pipeline a réussi avec succès !"
        }
        failure {
            echo "Le pipeline a échoué. Vérifie les logs !"
        }
    }
}
