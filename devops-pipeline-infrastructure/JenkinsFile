pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "my-test-app:${BUILD_NUMBER}"
        DOCKER_REGISTRY = "docker.io/myuser"
    }

    stages {
        stage('Cloner le code') {
            steps {
                // Cloner le code source
                git 'https://github.com/ton_repertoire.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Construire l'image Docker
                script {
                    sh 'docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE .'
                }
            }
        }

        stage('Tests Unitaires') {
            steps {
                // Lancer les tests unitaires
                script {
                    sh 'python3 -m unittest discover app/src/tests/test_main.py'
                }
            }
        }

        stage('Tests d\'Intégration') {
            steps {
                // Lancer les tests d'intégration
                script {
                    sh 'python3 -m unittest discover app/src/tests/test_integration.py'
                }
            }
        }

        stage('Tests de Performance') {
            steps {
                // Lancer les tests de performance (utilise un outil comme locust ou autre)
                script {
                    sh 'python3 -m unittest discover app/src/tests/test_performance.py'
                }
            }
        }

        stage('Tests de Sécurité') {
            steps {
                // Lancer les tests de sécurité (par exemple avec bandit)
                script {
                    sh 'bandit -r app/src'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                // Pousser l'image Docker vers le registre
                script {
                    sh 'docker push $DOCKER_REGISTRY/$DOCKER_IMAGE'
                }
            }
        }

        stage('Notification') {
            steps {
                // Envoi d'une notification Slack (facultatif)
                slackSend (channel: '#notifications', message: "Pipeline ${currentBuild.currentResult}: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
            }
        }
    }

    post {
        success {
            echo "Le pipeline a réussi avec succès!"
        }
        failure {
            echo "Le pipeline a échoué."
        }
    }
}

