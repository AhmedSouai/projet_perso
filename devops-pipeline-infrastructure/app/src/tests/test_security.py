import subprocess
import requests

# URL de l'application Flask (modifiez si n√©cessaire)
BASE_URL = "http://localhost:8080"

def test_bandit_security_scan():
    """
    Ex√©cute Bandit sur le code source et v√©rifie s'il y a des vuln√©rabilit√©s.
    """
    print("üîç Ex√©cution de Bandit pour l'analyse de s√©curit√©...")
    result = subprocess.run(["bandit", "-r", "../"], capture_output=True, text=True)
    
    print(result.stdout)  # Affiche le rapport Bandit dans la console
    
    assert "No issues identified." in result.stdout or "No issues found." in result.stdout, "‚ö†Ô∏è Bandit a d√©tect√© des vuln√©rabilit√©s !"

def test_sql_injection_protection():
    """
    V√©rifie si l'application est prot√©g√©e contre une injection de SQL na√Øve.
    """
    print("üõ°Ô∏è V√©rification de la protection contre l'injection SQL...")

    payload = "' OR 1=1 --"
    response = requests.get(f"{BASE_URL}/multiply/{payload}/2")

    assert response.status_code == 400, "‚ö†Ô∏è L'application ne prot√®ge pas contre l'injection SQL !"
    
def test_sensitive_data_exposure():
    """
    V√©rifie que l'application ne r√©v√®le pas d'informations sensibles dans ses r√©ponses d'erreur.
    """
    print("üõë V√©rification des erreurs HTTP pour √©viter l'exposition d'infos sensibles...")

    response = requests.get(f"{BASE_URL}/unknown_route")

    assert response.status_code == 404, "‚ö†Ô∏è L'application ne g√®re pas correctement les erreurs 404 !"
    assert "Traceback" not in response.text, "‚ö†Ô∏è L'application expose des d√©tails internes dans les erreurs HTTP !"

if __name__ == "__main__":
    test_bandit_security_scan()
    test_sql_injection_protection()
    test_sensitive_data_exposure()

    print("‚úÖ Tous les tests de s√©curit√© sont pass√©s avec succ√®s ! üéâ")

